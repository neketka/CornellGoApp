//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
//
//     Produced by Entity Framework Visual Editor v3.0.3.2
//     Source:                    https://github.com/msawczyn/EFDesigner
//     Visual Studio Marketplace: https://marketplace.visualstudio.com/items?itemName=michaelsawczyn.EFDesigner
//     Documentation:             https://msawczyn.github.io/EFDesigner/
//     License (MIT):             https://github.com/msawczyn/EFDesigner/blob/master/LICENSE
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.Linq;
using System.Runtime.CompilerServices;
using NetTopologySuite.Geometries;

namespace BackendModel
{
   /// <summary>
   /// Place suggestion created by the user
   /// </summary>
   [System.ComponentModel.Description("Place suggestion created by the user")]
   public partial class Suggestion
   {
      partial void Init();

      /// <summary>
      /// Default constructor. Protected due to required properties, but present because EF needs it.
      /// </summary>
      protected Suggestion()
      {
         Init();
      }

      /// <summary>
      /// Replaces default constructor, since it's protected. Caller assumes responsibility for setting all required values before saving.
      /// </summary>
      public static Suggestion CreateSuggestionUnsafe()
      {
         return new Suggestion();
      }

      /// <summary>
      /// Public constructor with required data
      /// </summary>
      /// <param name="imagejpg">JPEG Binary for this challenge suggestion</param>
      /// <param name="longlat">Suggested position</param>
      /// <param name="name">Name of this suggested challenge</param>
      /// <param name="desc">Description of the suggested challenge</param>
      /// <param name="timestamp">Creation timestamp</param>
      /// <param name="user"></param>
      public Suggestion(byte[] imagejpg, Point longlat, string name, string desc, DateTime timestamp, global::BackendModel.User user)
      {
         this.ImageJPG = imagejpg;

         this.LongLat = longlat;

         if (string.IsNullOrEmpty(name)) throw new ArgumentNullException(nameof(name));
         this.Name = name;

         if (string.IsNullOrEmpty(desc)) throw new ArgumentNullException(nameof(desc));
         this.Desc = desc;

         this.Timestamp = timestamp;

         if (user == null) throw new ArgumentNullException(nameof(user));
         this.User = user;
         user.Suggestions.Add(this);

         Init();
      }

      /// <summary>
      /// Static create function (for use in LINQ queries, etc.)
      /// </summary>
      /// <param name="imagejpg">JPEG Binary for this challenge suggestion</param>
      /// <param name="longlat">Suggested position</param>
      /// <param name="name">Name of this suggested challenge</param>
      /// <param name="desc">Description of the suggested challenge</param>
      /// <param name="timestamp">Creation timestamp</param>
      /// <param name="user"></param>
      public static Suggestion Create(byte[] imagejpg, Point longlat, string name, string desc, DateTime timestamp, global::BackendModel.User user)
      {
         return new Suggestion(imagejpg, longlat, name, desc, timestamp, user);
      }

      /*************************************************************************
       * Properties
       *************************************************************************/

      /// <summary>
      /// Identity, Indexed, Required
      /// Unique identifier
      /// </summary>
      [Key]
      [Required]
      [System.ComponentModel.Description("Unique identifier")]
      public long Id { get; set; }

      /// <summary>
      /// Required
      /// JPEG Binary for this challenge suggestion
      /// </summary>
      [Required]
      [System.ComponentModel.Description("JPEG Binary for this challenge suggestion")]
      public byte[] ImageJPG { get; set; }

      /// <summary>
      /// Required
      /// Suggested position
      /// </summary>
      [Required]
      [System.ComponentModel.Description("Suggested position")]
      public Point LongLat { get; set; }

      /// <summary>
      /// Required, Min length = 1, Max length = 60
      /// Name of this suggested challenge
      /// </summary>
      [Required]
      [MinLength(1)]
      [MaxLength(60)]
      [StringLength(60)]
      [System.ComponentModel.Description("Name of this suggested challenge")]
      public string Name { get; set; }

      /// <summary>
      /// Required, Min length = 1, Max length = 100
      /// Description of the suggested challenge
      /// </summary>
      [Required]
      [MinLength(1)]
      [MaxLength(100)]
      [StringLength(100)]
      [System.ComponentModel.Description("Description of the suggested challenge")]
      public string Desc { get; set; }

      /// <summary>
      /// Required
      /// Creation timestamp
      /// </summary>
      [Required]
      [System.ComponentModel.Description("Creation timestamp")]
      public DateTime Timestamp { get; set; }

      /*************************************************************************
       * Navigation properties
       *************************************************************************/

      /// <summary>
      /// Required&lt;br/&gt;
      /// Suggestions associated with this user
      /// </summary>
      [Description("Suggestions associated with this user")]
      public virtual global::BackendModel.User User { get; set; }

   }
}

