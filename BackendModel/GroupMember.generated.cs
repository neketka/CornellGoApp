//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
//
//     Produced by Entity Framework Visual Editor v3.0.3.2
//     Source:                    https://github.com/msawczyn/EFDesigner
//     Visual Studio Marketplace: https://marketplace.visualstudio.com/items?itemName=michaelsawczyn.EFDesigner
//     Documentation:             https://msawczyn.github.io/EFDesigner/
//     License (MIT):             https://github.com/msawczyn/EFDesigner/blob/master/LICENSE
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.Linq;
using System.Runtime.CompilerServices;
using NetTopologySuite.Geometries;

namespace BackendModel
{
   /// <summary>
   /// A member of a group
   /// </summary>
   [System.ComponentModel.Description("A member of a group")]
   public partial class GroupMember
   {
      partial void Init();

      /// <summary>
      /// Default constructor. Protected due to required properties, but present because EF needs it.
      /// </summary>
      protected GroupMember()
      {
         // NOTE: This class has one-to-one associations with GroupMember.
         // One-to-one associations are not validated in constructors since this causes a scenario where each one must be constructed before the other.

         Init();
      }

      /// <summary>
      /// Replaces default constructor, since it's protected. Caller assumes responsibility for setting all required values before saving.
      /// </summary>
      public static GroupMember CreateGroupMemberUnsafe()
      {
         return new GroupMember();
      }

      /// <summary>
      /// Public constructor with required data
      /// </summary>
      /// <param name="ishost">True if this member is a host</param>
      /// <param name="isdone">Is the group member done.</param>
      /// <param name="group"></param>
      public GroupMember(bool ishost, bool isdone, global::BackendModel.Group group)
      {
         // NOTE: This class has one-to-one associations with GroupMember.
         // One-to-one associations are not validated in constructors since this causes a scenario where each one must be constructed before the other.

         this.IsHost = ishost;

         this.IsDone = isdone;

         if (group == null) throw new ArgumentNullException(nameof(group));
         this.Group = group;
         group.GroupMembers.Add(this);

         Init();
      }

      /// <summary>
      /// Static create function (for use in LINQ queries, etc.)
      /// </summary>
      /// <param name="ishost">True if this member is a host</param>
      /// <param name="isdone">Is the group member done.</param>
      /// <param name="group"></param>
      public static GroupMember Create(bool ishost, bool isdone, global::BackendModel.Group group)
      {
         return new GroupMember(ishost, isdone, group);
      }

      /*************************************************************************
       * Properties
       *************************************************************************/

      /// <summary>
      /// Identity, Indexed, Required
      /// Unique identifier
      /// </summary>
      [Key]
      [Required]
      [System.ComponentModel.Description("Unique identifier")]
      public long Id { get; set; }

      /// <summary>
      /// Required
      /// True if this member is a host
      /// </summary>
      [Required]
      [System.ComponentModel.Description("True if this member is a host")]
      public bool IsHost { get; set; }

      /// <summary>
      /// Required
      /// Is the group member done.
      /// </summary>
      [Required]
      [System.ComponentModel.Description("Is the group member done.")]
      public bool IsDone { get; set; }

      /*************************************************************************
       * Navigation properties
       *************************************************************************/

      /// <summary>
      /// Required&lt;br/&gt;
      /// Membership of this user in a group
      /// </summary>
      [Description("Membership of this user in a group")]
      public virtual global::BackendModel.User User { get; set; }

      /// <summary>
      /// Required&lt;br/&gt;
      /// Group members of this group
      /// </summary>
      [Description("Group members of this group")]
      public virtual global::BackendModel.Group Group { get; set; }

   }
}

