{"version":3,"sources":["components/ServerData.tsx","components/Places.tsx","components/AdminApproval.tsx","App.tsx","reportWebVitals.ts","components/Login.tsx","index.tsx"],"names":["ServerLoginResult","PlaceDataModifiedState","ServerDataContext","createContext","places","unapprovedAdmins","loggedIn","addPlace","p","deletePlace","id","modifyPlace","i","updateAdmin","name","approve","login","password","a","AdminRejected","requestAdmin","ServerData","props","useState","setPlaces","setUnapprovedAdmins","setLoggedIn","connectionRef","useRef","methodRef","modified","state","data","approval","email","logout","placesRef","useEffect","current","Created","Destroyed","filter","place","Modified","idx","findIndex","console","log","approved","admin","signalR","withUrl","withAutomaticReconnect","build","on","onclose","e","onreconnected","start","catch","err","invoke","then","imageUrl","description","points","lat","long","radius","citationUrl","linkUrl","longDescription","result","Success","stream","subscribe","next","push","complete","reverse","error","admins","Provider","value","children","useStyles","makeStyles","theme","media","paddingTop","PlaceCard","remove","edit","classes","Card","CardHeader","action","IconButton","onClick","Edit","title","subheader","CardMedia","image","className","CardContent","Typography","variant","color","component","CardActions","disableSpacing","Delete","DeleteDialog","close","isOpen","dataContext","useContext","Dialog","open","onClose","DialogTitle","DialogContent","DialogContentText","find","DialogActions","Button","autoFocus","EditorDialog","emptyPlace","setData","scroll","fullWidth","maxWidth","Grid","container","TextField","label","onChange","target","style","marginBottom","parseInt","type","parseFloat","inputProps","maxLength","multiline","Places","editorOpen","setEditorOpen","dialogId","setDialogId","deleteOpen","setDeleteOpen","searchQuery","setSearchQuery","searchRef","editClicked","deleteClicked","items","setItems","mapper","url","sorter","b","StringSimilarity","clearTimeout","map","window","setTimeout","sort","justify","alignContent","position","top","opacity","zIndex","item","xs","Paper","elevation","spacing","alignItems","Box","ml","mr","size","InputProps","startAdornment","InputAdornment","Search","marginTop","AdminCard","AdminApproval","length","root","display","appBar","drawer","width","flexShrink","drawerPaper","drawerContainer","overflow","content","flexGrow","padding","NavigationDrawer","drawerClass","history","useHistory","Drawer","paper","Toolbar","List","ListItem","button","ListItemIcon","Home","ListItemText","primary","LocationOn","VerifiedUser","PeopleRounded","App","AppBar","CssBaseline","marginLeft","path","exact","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","Login","setEmail","setPassword","badText","setBadText","passBadText","setPassBadText","requested","setRequested","NoAdminApproval","NoAccount","WrongPassword","requestAccess","EmailValidator","helperText","Snackbar","anchorOrigin","vertical","horizontal","autoHideDuration","message","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6GA6BYA,EAQAC,E,mbARAD,O,qCAAAA,I,iCAAAA,I,yBAAAA,I,iCAAAA,I,sBAAAA,M,cAQAC,O,qBAAAA,I,yBAAAA,I,wBAAAA,M,KAML,IAAMC,EAAoBC,wBAAc,CAC7CC,OAAQ,GACRC,iBAAkB,GAClBC,UAAU,EACVC,SAAU,SAACC,KACXC,YAAa,SAACC,KACdC,YAAa,SAACC,EAAGJ,KACjBK,YAAa,SAACC,EAAMC,KACpBC,MAAM,WAAD,4BAAE,WAAOF,EAAMG,GAAb,SAAAC,EAAA,+EAA0BlB,EAAkBmB,eAA5C,2CAAF,qDAAC,GACNC,aAAa,WAAD,4BAAE,WAAON,EAAMG,GAAb,SAAAC,EAAA,gFAA0B,GAA1B,2CAAF,qDAAC,KAGR,SAASG,GAAWC,GAAiC,IAAD,EAC7BC,mBAAS,IADoB,mBAClDnB,EADkD,KAC1CoB,EAD0C,OAETD,mBAAS,IAFA,mBAElDlB,EAFkD,KAEhCoB,EAFgC,OAGzBF,oBAAS,GAHgB,mBAGlDjB,EAHkD,KAGxCoB,EAHwC,KAKnDC,EAAgBC,mBAEhBC,EAAYD,iBAAO,CACvBE,SAAU,SAACC,EAA+BC,KAC1CC,SAAU,SAACC,EAAeD,KAC1BE,OAAQ,eAGJC,EAAYR,iBAAO,IAEzBS,qBAAU,WACRR,EAAUS,QAAQR,SAAW,SAC3BC,EACAC,GAEA,OAAQD,GACN,KAAK9B,EAAuBsC,QAC1Bf,EAAU,CAACQ,GAAF,mBAAW5B,KACpB,MACF,KAAKH,EAAuBuC,UAC1BhB,EAAUpB,EAAOqC,QAAO,SAACC,GAAD,OAAWA,EAAMhC,KAAOsB,EAAKtB,OACrD,MACF,KAAKT,EAAuB0C,SAExB,IAAMC,EAAMxC,EAAOyC,WAAU,SAACH,GAAD,OAAWA,EAAMhC,KAAOsB,EAAKtB,MAC1DoC,QAAQC,IAAIH,EAAKxC,GACbwC,GAAO,IACTxC,EAAOwC,GAAOZ,EACdR,EAAU,YAAIpB,OAOxByB,EAAUS,QAAQL,SAAW,SAACC,EAAec,GAEzCvB,EADEuB,EACkB3C,EAAiBoC,QAAO,SAACQ,GAAD,OAAWA,IAAUf,KAE7C,GAAD,mBAAK7B,GAAL,CAAuB6B,MAE9CL,EAAUS,QAAQH,OAAS,WACzBT,GAAY,OAIhBW,qBAAU,WACRV,EAAcW,SAAU,IAAIY,KACzBC,QAAQ,aACRC,yBACAC,QAEH1B,EAAcW,QAAQgB,GACpB,iBACA,SAACvB,EAA+BC,GAAhC,OACEH,EAAUS,QAAQR,SAASC,EAAOC,MAEtCL,EAAcW,QAAQgB,GACpB,uBACA,SAACpB,EAAeD,GAAhB,OACEJ,EAAUS,QAAQL,SAASC,EAAOD,MAEtCN,EAAcW,QAAQiB,SAAQ,SAACC,GAAD,OAAO3B,EAAUS,QAAQH,YACvDR,EAAcW,QAAQmB,eAAc,SAACD,GAAD,OAAO3B,EAAUS,QAAQH,YAC7DR,EAAcW,QAAQoB,QAAQC,OAAM,SAACC,GAAD,OAASd,QAAQC,IAAIa,QACxD,IAEH,IAAM5B,EAAuB,CAC3B5B,SACAC,mBACAC,WACAC,SAAU,SAACC,GAAO,IAAD,EACf,UAAAmB,EAAcW,eAAd,SACIuB,OAAO,cAAe5D,EAAuBsC,QAAS/B,GACvDsD,KAAKpC,IAEVjB,YAAa,SAACC,GAAQ,IAAD,EACnB,UAAAiB,EAAcW,eAAd,SACIuB,OAAO,cAAe5D,EAAuBuC,UAAW,CACxD9B,GAAIA,EACJqD,SAAU,GACVjD,KAAM,GACNkD,YAAa,GACbC,OAAQ,EACRC,IAAK,EACLC,KAAM,EACNC,OAAQ,EACRC,YAAa,GACbC,QAAS,GACTC,gBAAiB,KAElBT,KAAKpC,IAEVf,YAAa,SAACD,EAAIF,GAAO,IAAD,EACtB,UAAAmB,EAAcW,eAAd,SACIuB,OAAO,cAAe5D,EAAuB0C,SADjD,2BAEOnC,GAFP,IAGIE,GAAIA,KAELoD,KAAKpC,IAEVb,YAAa,SAACC,EAAMC,GAAa,IAAD,EAC9B,UAAAY,EAAcW,eAAd,SACIuB,OAAO,oBAAqB/C,EAAMC,GACnC+C,KAAKpC,IAEVV,MAAM,WAAD,4BAAE,WAAOF,EAAMG,GAAb,qBAAAC,EAAA,gFACgBS,EAAcW,eAD9B,aACgB,EAAuBuB,OAC1C,QACA/C,EACAG,GAJG,cACCuD,EADD,UAMUxE,EAAkByE,UAC/BrC,EAAUE,QAAU,GACpB,UAAAX,EAAcW,eAAd,SAAuBoC,OAAO,aAAaC,UAAU,CACnDC,KAAM,SAAClC,GACLI,QAAQC,IAAIL,GACZN,EAAUE,QAAQuC,KAAKnC,IAEzBoC,SAAU,kBAAMtD,EAAUY,EAAUE,QAAQyC,YAC5CC,MAAO,SAACpB,OAGV,UAAAjC,EAAcW,eAAd,SACIuB,OAAO,uBACRC,MAAK,SAACmB,GAAD,OACJxD,EAAoB,GAAD,mBAAKwD,GAAL,YAAgB5E,QAEvCqB,GAAY,IAtBT,kBAwBE8C,GAxBF,2CAAF,qDAAC,GA0BNpD,aAAa,WAAD,4BAAE,WAAON,EAAMG,GAAb,eAAAC,EAAA,gFACES,EAAcW,eADhB,aACE,EAAuBuB,OACnC,eACA/C,EACAG,GAJU,mFAAF,qDAAC,IAQf,OACE,cAACf,EAAkBgF,SAAnB,CAA4BC,MAAOnD,EAAnC,SACGV,EAAM8D,WCjKb,IAAMC,GAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,MAAO,CACLC,WAAY,WAIhB,SAASC,GAAT,GAQoB,IAPlBhF,EAOiB,EAPjBA,GACAI,EAMiB,EANjBA,KACAiD,EAKiB,EALjBA,SACAC,EAIiB,EAJjBA,YACAC,EAGiB,EAHjBA,OACA0B,EAEiB,EAFjBA,OACAC,EACiB,EADjBA,KAEMC,EAAUR,KAChB,OACE,eAACS,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CACEC,OACE,cAACC,EAAA,EAAD,CAAYC,QAAS,kBAAMN,EAAKlF,IAAhC,SACE,cAACyF,EAAA,EAAD,MAGJC,MAAOtF,EACPuF,UAAWpC,GAAqB,IAAXA,EAAe,SAAW,aAEjD,cAACqC,EAAA,EAAD,CAAWC,MAAOxC,EAAUyC,UAAWX,EAAQL,QAC/C,cAACiB,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,CAAYC,QAAQ,QAAQC,MAAM,gBAAgBC,UAAU,IAA5D,SACG7C,MAGL,cAAC8C,EAAA,EAAD,CAAaC,gBAAc,EAA3B,SACE,cAACd,EAAA,EAAD,CAAYC,QAAS,kBAAMP,EAAOjF,IAAlC,SACE,cAACsG,EAAA,EAAD,WAaV,SAASC,GAAT,GAAgE,IAAD,EAAvCvG,EAAuC,EAAvCA,GAAIwG,EAAmC,EAAnCA,MAAOC,EAA4B,EAA5BA,OAC3BC,EAAcC,qBAAWnH,GAO/B,OACE,eAACoH,EAAA,EAAD,CAAQC,KAAMJ,EAAQK,QAASN,EAA/B,UACE,cAACO,EAAA,EAAD,iCACA,cAACC,EAAA,EAAD,UACE,eAACC,EAAA,EAAD,CAAmBjH,GAAG,2BAAtB,wDAEG0G,EAAYhH,OAAOwH,MAAK,SAAClF,GAAD,OAAWA,EAAMhC,KAAOA,YAFnD,aAEG,EAAqDI,KAFxD,UAMF,eAAC+G,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CAAQ5B,QAASgB,EAAON,MAAM,UAA9B,oBAGA,cAACkB,EAAA,EAAD,CAAQ5B,QAnBF,WACVkB,EAAY3G,YAAYC,GACxBwG,KAiB0BN,MAAM,YAAYmB,WAAS,EAAjD,0BAQR,SAASC,GAAT,GAAgE,IAAxCtH,EAAuC,EAAvCA,GAAIwG,EAAmC,EAAnCA,MAAOC,EAA4B,EAA5BA,OAC3Bc,EAA0B,CAC9BnH,KAAM,GACNJ,GAAI,GACJqD,SAAU,GACVC,YAAa,GACbE,IAAK,EACLC,KAAM,EACNF,OAAQ,EACRG,OAAQ,EACRC,YAAa,GACbC,QAAS,GACTC,gBAAiB,IAZ0C,EAerChD,mBAAS0G,GAf4B,mBAetDjG,EAfsD,KAehDkG,EAfgD,KAgBvDd,EAAcC,qBAAWnH,GAE/BmC,qBAAU,WACR,GAAI8E,EACF,GAAW,SAAPzG,EAAewH,EAAQD,OACtB,CACH,IAAMvF,EAAQ0E,EAAYhH,OAAOwH,MAAK,SAAClF,GAAD,OAAWA,EAAMhC,KAAOA,KAC1DgC,GAAOwF,EAAQxF,MAGtB,CAACyE,EAAQzG,EAAI0G,IAQhB,OACE,eAACE,EAAA,EAAD,CAAQC,KAAMJ,EAAQK,QAASN,EAAOiB,OAAO,OAAOC,WAAS,EAACC,SAAS,KAAvE,UACE,cAACZ,EAAA,EAAD,UAAqB,SAAP/G,EAAgB,YAAc,eAC5C,cAACgH,EAAA,EAAD,UACE,eAACY,EAAA,EAAD,CAAMC,WAAS,EAAf,UACE,cAACD,EAAA,EAAD,CAAMC,WAAS,EAAf,SACE,cAACC,EAAA,EAAD,CACEC,MAAM,OACNtD,MAAOnD,EAAKlB,KACZ4H,SAAU,SAAClF,GAAD,OAAO0E,EAAQ,2BAAKlG,GAAN,IAAYlB,KAAM0C,EAAEmF,OAAOxD,UACnDyD,MAAO,CAAEC,aAAc,GACvBT,WAAS,MAGb,cAACE,EAAA,EAAD,CAAMC,WAAS,EAAf,SACE,cAACC,EAAA,EAAD,CACEC,MAAM,SACNtD,MAAOnD,EAAKiC,OACZyE,SAAU,SAAClF,GAAD,OACR0E,EAAQ,2BAAKlG,GAAN,IAAYiC,OAAQ6E,SAAStF,EAAEmF,OAAOxD,WAE/C4D,KAAK,SACLH,MAAO,CAAEC,aAAc,GACvBT,WAAS,MAGb,cAACE,EAAA,EAAD,CAAMC,WAAS,EAAf,SACE,cAACC,EAAA,EAAD,CACEC,MAAM,WACNM,KAAK,SACL5D,MAAOnD,EAAKkC,IACZwE,SAAU,SAAClF,GAAD,OACR0E,EAAQ,2BAAKlG,GAAN,IAAYkC,IAAK8E,WAAWxF,EAAEmF,OAAOxD,WAE9CyD,MAAO,CAAEC,aAAc,GACvBT,WAAS,MAGb,cAACE,EAAA,EAAD,CAAMC,WAAS,EAAf,SACE,cAACC,EAAA,EAAD,CACEC,MAAM,YACNM,KAAK,SACL5D,MAAOnD,EAAKmC,KACZuE,SAAU,SAAClF,GAAD,OACR0E,EAAQ,2BAAKlG,GAAN,IAAYmC,KAAM6E,WAAWxF,EAAEmF,OAAOxD,WAE/CyD,MAAO,CAAEC,aAAc,GACvBT,WAAS,MAGb,cAACE,EAAA,EAAD,CAAMC,WAAS,EAAf,SACE,cAACC,EAAA,EAAD,CACEC,MAAM,0BACNM,KAAK,SACL5D,MAAOnD,EAAKoC,OACZsE,SAAU,SAAClF,GAAD,OACR0E,EAAQ,2BAAKlG,GAAN,IAAYoC,OAAQ4E,WAAWxF,EAAEmF,OAAOxD,WAEjDyD,MAAO,CAAEC,aAAc,GACvBT,WAAS,MAGb,cAACE,EAAA,EAAD,CAAMC,WAAS,EAAf,SACE,cAACC,EAAA,EAAD,CACEC,MAAM,YACNtD,MAAOnD,EAAK+B,SACZ2E,SAAU,SAAClF,GAAD,OAAO0E,EAAQ,2BAAKlG,GAAN,IAAY+B,SAAUP,EAAEmF,OAAOxD,UACvDyD,MAAO,CAAEC,aAAc,GACvBT,WAAS,MAGb,cAACE,EAAA,EAAD,CAAMC,WAAS,EAAf,SACE,cAACC,EAAA,EAAD,CACEC,MAAM,sBACNtD,MAAOnD,EAAKgC,YACZ0E,SAAU,SAAClF,GAAD,OACR0E,EAAQ,2BAAKlG,GAAN,IAAYgC,YAAaR,EAAEmF,OAAOxD,UAE3C8D,WAAY,CACVC,UAAW,KAEbN,MAAO,CAAEC,aAAc,GACvBT,WAAS,EACTe,WAAS,MAGb,cAACb,EAAA,EAAD,CAAMC,WAAS,EAAf,SACE,cAACC,EAAA,EAAD,CACEC,MAAM,yBACNtD,MAAOnD,EAAKuC,gBACZmE,SAAU,SAAClF,GAAD,OACR0E,EAAQ,2BAAKlG,GAAN,IAAYuC,gBAAiBf,EAAEmF,OAAOxD,UAE/CyD,MAAO,CAAEC,aAAc,GACvBT,WAAS,EACTe,WAAS,MAGb,cAACb,EAAA,EAAD,CAAMC,WAAS,EAAf,SACE,cAACC,EAAA,EAAD,CACEC,MAAM,0BACNtD,MAAOnD,EAAKqC,YACZqE,SAAU,SAAClF,GAAD,OACR0E,EAAQ,2BAAKlG,GAAN,IAAYqC,YAAab,EAAEmF,OAAOxD,UAE3CyD,MAAO,CAAEC,aAAc,GACvBT,WAAS,EACTe,WAAS,MAGb,cAACb,EAAA,EAAD,CAAMC,WAAS,EAAf,SACE,cAACC,EAAA,EAAD,CACEC,MAAM,iBACNtD,MAAOnD,EAAKsC,QACZoE,SAAU,SAAClF,GAAD,OAAO0E,EAAQ,2BAAKlG,GAAN,IAAYsC,QAASd,EAAEmF,OAAOxD,UACtDyD,MAAO,CAAEC,aAAc,GACvBT,WAAS,EACTe,WAAS,WAKjB,eAACtB,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CAAQ5B,QAASgB,EAAON,MAAM,UAA9B,oBAGA,cAACkB,EAAA,EAAD,CAAQ5B,QApIC,WACF,SAAPxF,EAAe0G,EAAY7G,SAASyB,GACnCoF,EAAYzG,YAAYD,EAAIsB,GACjCkF,KAiI6BN,MAAM,UAA/B,wBAgBO,SAASwC,GAAT,GAAqB,qBACE7H,oBAAS,GADZ,mBAC1B8H,EAD0B,KACdC,EADc,OAED/H,mBAAS,QAFR,mBAE1BgI,EAF0B,KAEhBC,EAFgB,OAGGjI,oBAAS,GAHZ,mBAG1BkI,EAH0B,KAGdC,EAHc,OAKKnI,mBAAS,IALd,mBAK1BoI,EAL0B,KAKbC,EALa,KAM3BC,EAAYjI,iBAAO,GAEnBwF,EAAcC,qBAAWnH,GAOzB4J,EAAc,SAACpJ,GACnB8I,EAAY9I,GACZ4I,GAAc,IAGVS,EAAgB,SAACrJ,GACrB8I,EAAY9I,GACZgJ,GAAc,IAtBiB,EAyBTnI,mBAAS,IAzBA,mBAyB5ByI,EAzB4B,KAyBrBC,EAzBqB,KAmDjC,OAxBA5H,qBAAU,WACR,IAAM6H,EAAS,SAAC1J,GAAD,MACZ,CACCE,GAAIF,EAAEE,GACNI,KAAMN,EAAEM,KACRmD,OAAQzD,EAAEyD,OACVkG,IAAK3J,EAAEuD,SACPC,YAAaxD,EAAEwD,cAGboG,EAAS,SAAClJ,EAAmBmJ,GAApB,OACbC,oBAAmCD,EAAEvJ,KAAM6I,GAC3CW,oBAAmCpJ,EAAEJ,KAAM6I,IAE7CY,aAAaV,EAAUvH,SACH,KAAhBqH,EACFM,EAAS7C,EAAYhH,OAAOoK,IAAIN,IAEhCL,EAAUvH,QAAUmI,OAAOC,YAAW,WACpCT,EAAS7C,EAAYhH,OAAOoK,IAAIN,GAAQS,KAAKP,MAC5C,OAEJ,CAAChD,EAAauC,IAGf,qCACE,cAAC1C,GAAD,CACEvG,GAAI6I,EACJpC,OAAQsC,EACRvC,MAAO,kBAAMwC,GAAc,MAE7B,cAAC1B,GAAD,CACEtH,GAAI6I,EACJpC,OAAQkC,EACRnC,MAAO,kBAAMoC,GAAc,MAE7B,eAAChB,EAAA,EAAD,CAAMC,WAAS,EAACqC,QAAQ,SAASC,aAAa,SAA9C,UACE,eAACvC,EAAA,EAAD,CACEC,WAAS,EACTK,MAAO,CAAEkC,SAAU,SAAUC,IAAK,GAAIC,QAAS,IAAMC,OAAQ,KAF/D,UAIE,cAAC3C,EAAA,EAAD,CAAM4C,MAAI,EAACC,GAAI,IACf,cAAC7C,EAAA,EAAD,CAAM4C,MAAI,EAACC,GAAI,GAAf,SACE,cAACC,EAAA,EAAD,CAAOC,UAAW,EAAlB,SACE,eAAC/C,EAAA,EAAD,CAAMC,WAAS,EAAC+C,QAAS,EAAGC,WAAW,SAAvC,UACE,cAACjD,EAAA,EAAD,CAAM4C,MAAI,EAACC,GAAI,EAAf,SACE,cAACK,EAAA,EAAD,CAAKC,GAAI,EAAT,SACE,cAAC3D,EAAA,EAAD,CAAQ5B,QAhEF,WACtBsD,EAAY,QACZF,GAAc,IA8DE,2BAGJ,cAAChB,EAAA,EAAD,CAAM4C,MAAI,EAACC,IAAE,EAAb,SACE,cAACK,EAAA,EAAD,CAAKE,GAAI,EAAT,SACE,cAAClD,EAAA,EAAD,CACE9H,GAAG,uBACHiG,QAAQ,WACRgF,KAAK,QACL5C,KAAK,SACLL,SAAU,SAAClF,GAAD,OAAOoG,EAAepG,EAAEmF,OAAOxD,QACzCiD,WAAS,EACTwD,WAAY,CACVC,eACE,cAACC,EAAA,EAAD,CAAgBhB,SAAS,QAAzB,SACE,cAACiB,EAAA,EAAD,uBAWpB,cAACzD,EAAA,EAAD,CAAMC,WAAS,EAACK,MAAO,CAAEoD,UAAW,IAApC,SACGhC,EAAMQ,KAAI,SAACU,GAAD,OACT,eAAC5C,EAAA,EAAD,CAAMC,WAAS,EAACK,MAAO,CAAEC,aAAc,IAAvC,UACE,cAACP,EAAA,EAAD,CAAM6C,GAAI,EAAGD,MAAI,IACjB,cAAC5C,EAAA,EAAD,CAAM6C,GAAI,EAAGD,MAAI,EAAjB,SACE,cAACxF,GAAD,CACEhF,GAAIwK,EAAKxK,GACTI,KAAMoK,EAAKpK,KACXiD,SAAUmH,EAAKf,IACfnG,YAAakH,EAAKlH,YAClBC,OAAQiH,EAAKjH,OACb2B,KAAMkE,EACNnE,OAAQoE,QAVoCmB,EAAKxK,e,cC5XnE,SAASuL,GAAT,GAA8C,IAAzBnL,EAAwB,EAAxBA,KACbsG,EAAcC,qBAAWnH,GAE/B,OACE,eAAC4F,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CAAYK,MAAM,6BAClB,eAACK,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CAAYC,QAAQ,QAAQE,UAAU,OAAtC,4BAGA,cAACH,EAAA,EAAD,CAAYC,QAAQ,QAAQE,UAAU,OAAtC,SACG,IAAM/F,OAGX,eAACgG,EAAA,EAAD,WACE,cAACgB,EAAA,EAAD,CACE6D,KAAK,QACLzF,QAAS,kBAAMkB,EAAYvG,YAAYC,GAAM,IAF/C,qBAMA,cAACgH,EAAA,EAAD,CACE6D,KAAK,QACLzF,QAAS,kBAAMkB,EAAYvG,YAAYC,GAAM,IAC7C8F,MAAM,YAHR,wBAYO,SAASsF,KACtB,IAAM9E,EAAcC,qBAAWnH,GAE/B,OACE,eAACoI,EAAA,EAAD,CAAMC,WAAS,EAACqC,QAAQ,SAAxB,UAC2C,IAAxCxD,EAAY/G,iBAAiB8L,OAC5B,cAACzF,EAAA,EAAD,sCACE,KACHU,EAAY/G,iBAAiBmK,KAAI,SAAC1J,GAAD,OAChC,eAACwH,EAAA,EAAD,CAAMC,WAAS,EAACK,MAAO,CAAEC,aAAc,IAAvC,UACE,cAACP,EAAA,EAAD,CAAM6C,GAAI,EAAGD,MAAI,IACjB,cAAC5C,EAAA,EAAD,CAAM6C,GAAI,EAAGD,MAAI,EAAjB,SACE,cAACe,GAAD,CAAWnL,KAAMA,QAH6BA,SC3B1D,IAEMuE,GAAYC,aAAW,SAACC,GAAD,MAAY,CACvC6G,KAAM,CACJC,QAAS,QAEXC,OAAQ,CACNrB,OAAQ1F,EAAM0F,OAAOsB,OAAS,GAEhCA,OAAQ,CACNC,MAVgB,IAWhBC,WAAY,GAEdC,YAAa,CACXF,MAdgB,KAgBlBG,gBAAiB,CACfC,SAAU,QAEZC,QAAS,CACPC,SAAU,EACVC,QAASxH,EAAM+F,QAAQ,QAS3B,SAAS0B,GAAT,GAAgF,IAApDC,EAAmD,EAAnDA,YAAaP,EAAsC,EAAtCA,YACjCQ,EAAUC,eAChB,OACE,eAACC,EAAA,EAAD,CACEzG,QAAQ,YACRH,UAAWyG,EACXpH,QAAS,CAAEwH,MAAOX,GAHpB,UAKE,cAACY,EAAA,EAAD,IACA,eAACC,EAAA,EAAD,WACE,eAACC,EAAA,EAAD,CAAUC,QAAM,EAACvH,QAAS,kBAAMgH,EAAQrI,KAAK,MAA7C,UACE,cAAC6I,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,MAEF,cAACC,EAAA,EAAD,CAAcC,QAAQ,YAExB,eAACL,EAAA,EAAD,CAAUC,QAAM,EAACvH,QAAS,kBAAMgH,EAAQrI,KAAK,YAA7C,UACE,cAAC6I,EAAA,EAAD,UACE,cAACI,EAAA,EAAD,MAEF,cAACF,EAAA,EAAD,CAAcC,QAAQ,cAExB,eAACL,EAAA,EAAD,CAAUC,QAAM,EAACvH,QAAS,kBAAMgH,EAAQrI,KAAK,YAA7C,UACE,cAAC6I,EAAA,EAAD,UACE,cAACK,EAAA,EAAD,MAEF,cAACH,EAAA,EAAD,CAAcC,QAAQ,sBAExB,eAACL,EAAA,EAAD,CAAUC,QAAM,EAACvH,QAAS,kBAAMgH,EAAQrI,KAAK,WAA7C,UACE,cAAC6I,EAAA,EAAD,UACE,cAACM,EAAA,EAAD,MAEF,cAACJ,EAAA,EAAD,CAAcC,QAAQ,mBAOjB,SAASI,KACtB,IAAMpI,EAAUR,KAEhB,OACE,eAAC,KAAD,WACE,eAAC6I,EAAA,EAAD,CAAQpD,SAAS,QAAQtE,UAAWX,EAAQyG,OAA5C,UACE,cAAC6B,EAAA,EAAD,IACA,cAACb,EAAA,EAAD,UACE,cAAC5G,EAAA,EAAD,CAAYC,QAAQ,YAAYC,MAAM,UAAtC,qCAMJ,cAACoG,GAAD,CACEC,YAAapH,EAAQ0G,OACrBG,YAAa7G,EAAQ6G,cAGvB,qBAAK9D,MAAO,CAAEwF,WAAY,IAAKpC,UAAW,IAA1C,SACE,eAAC,KAAD,WACE,cAAC,KAAD,CAAOqC,KAAK,IAAIC,OAAK,EAArB,SACE,yCAEF,cAAC,KAAD,CAAOD,KAAK,UAAZ,SACE,cAACjF,GAAD,MAEF,cAAC,KAAD,CAAOiF,KAAK,UAAZ,SACE,cAACnC,GAAD,MAEF,cAAC,KAAD,CAAOmC,KAAK,SAAZ,SACE,kDClIZ,IAYeE,GAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqB3K,MAAK,YAAkD,IAA/C4K,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,mBCQC,SAASO,GAAMzN,GAC5B,IAAM8F,EAAcC,qBAAWnH,GAD6B,EAGlCqB,mBAAS,IAHyB,mBAGrDW,EAHqD,KAG9C8M,EAH8C,OAI5BzN,mBAAS,IAJmB,mBAIrDN,EAJqD,KAI3CgO,EAJ2C,OAK9B1N,mBAAS,IALqB,mBAKrD2N,EALqD,KAK5CC,EAL4C,OAMtB5N,mBAAS,IANa,mBAMrD6N,EANqD,KAMxCC,EANwC,OAO1B9N,oBAAS,GAPiB,mBAOrD+N,EAPqD,KAO1CC,EAP0C,KAStDvO,EAAK,uCAAG,4BAAAE,EAAA,sEACSkG,EAAYpG,MAAMkB,EAAOjB,GADlC,OACNuD,EADM,OAEZ2K,EACE3K,IAAWxE,EAAkBwP,gBACzB,6BACAhL,IAAWxE,EAAkBmB,cAC7B,0BACAqD,IAAWxE,EAAkByP,UAC7B,gCACA,IAEFjL,IAAWxE,EAAkB0P,eAC/BL,EAAe,sBAZL,2CAAH,qDAeLM,EAAa,uCAAG,sBAAAzO,EAAA,yDACf0O,YAAwB1N,GADT,uBAElBiN,EAAW,yBAFO,0CAKC/H,EAAYhG,aAAac,EAAOjB,GALjC,eAQlBkO,EAAW,IACXI,GAAa,IAEbJ,EAAW,0CAXO,2CAAH,qDAenB,OACE,qCACE,eAAC7H,EAAA,EAAD,CACEC,MAAOH,EAAY9G,SACnB6H,OAAO,OACPC,WAAS,EACTC,SAAS,KAJX,UAME,cAACZ,EAAA,EAAD,iCACA,cAACC,EAAA,EAAD,UACE,cAACY,EAAA,EAAD,CAAMC,WAAS,EAAf,SACE,eAACD,EAAA,EAAD,CAAMC,WAAS,EAAf,UACE,cAACC,EAAA,EAAD,CACEC,MAAM,QACNtD,MAAOjD,EACPwG,SAAU,SAAClF,GAAD,OAAOwL,EAASxL,EAAEmF,OAAOxD,QACnCyD,MAAO,CAAEC,aAAc,GACvB7D,MAAOkK,EAAQ/C,OAAS,EACxB0D,WAAYX,EACZ9G,WAAS,IAEX,cAACI,EAAA,EAAD,CACEC,MAAM,WACNtD,MAAOlE,EACP8H,KAAK,WACLL,SAAU,SAAClF,GAAD,OAAOyL,EAAYzL,EAAEmF,OAAOxD,QACtCyD,MAAO,CAAEC,aAAc,GACvB7D,MAAOoK,EAAYjD,OAAS,EAC5B0D,WAAYT,EACZhH,WAAS,WAKjB,eAACP,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CAAQ5B,QAASlF,EAAO4F,MAAM,UAA9B,mBAGA,cAACkB,EAAA,EAAD,CAAQ5B,QAASyJ,EAAe/I,MAAM,UAAtC,kCAKJ,cAACkJ,GAAA,EAAD,CACEC,aAAc,CAAEC,SAAU,SAAUC,WAAY,UAChD1I,KAAM+H,EACNY,iBAAkB,IAClB1I,QAAS,kBAAM+H,GAAa,IAC5BY,QAAQ,2BAET/I,EAAY9G,UAAYgB,EAAM8D,YClGrCgL,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAACjP,GAAD,UACE,cAAC0N,GAAD,UACE,cAACd,GAAD,UAINsC,SAASC,eAAe,SAM1BjC,M","file":"static/js/main.003ae6af.chunk.js","sourcesContent":["import { createContext, useState, useRef, useEffect, ReactNode } from \"react\";\r\nimport * as signalR from \"@microsoft/signalr\";\r\n\r\nexport type ServerPlace = {\r\n  id: string;\r\n  imageUrl: string;\r\n  name: string;\r\n  description: string;\r\n  points: number;\r\n  lat: number;\r\n  long: number;\r\n  radius: number;\r\n  citationUrl: string;\r\n  linkUrl: string;\r\n  longDescription: string;\r\n};\r\n\r\nexport type ServerDataType = {\r\n  places: ServerPlace[];\r\n  unapprovedAdmins: string[];\r\n  loggedIn: boolean;\r\n  addPlace: (place: ServerPlace) => void;\r\n  deletePlace: (id: string) => void;\r\n  modifyPlace: (id: string, place: ServerPlace) => void;\r\n  updateAdmin: (name: string, approve: boolean) => void;\r\n  login: (name: string, password: string) => Promise<ServerLoginResult>;\r\n  requestAdmin: (name: string, password: string) => Promise<boolean>;\r\n};\r\n\r\nexport enum ServerLoginResult {\r\n  NoAdminApproval = 0,\r\n  AdminRejected = 1,\r\n  NoAccount = 2,\r\n  WrongPassword = 3,\r\n  Success = 4,\r\n}\r\n\r\nexport enum PlaceDataModifiedState {\r\n  Created = 0,\r\n  Destroyed = 1,\r\n  Modified = 2,\r\n}\r\n\r\nexport const ServerDataContext = createContext({\r\n  places: [],\r\n  unapprovedAdmins: [],\r\n  loggedIn: false,\r\n  addPlace: (p) => {},\r\n  deletePlace: (id) => {},\r\n  modifyPlace: (i, p) => {},\r\n  updateAdmin: (name, approve) => {},\r\n  login: async (name, password) => ServerLoginResult.AdminRejected,\r\n  requestAdmin: async (name, password) => false,\r\n} as ServerDataType);\r\n\r\nexport function ServerData(props: { children: ReactNode }) {\r\n  const [places, setPlaces] = useState([] as ServerPlace[]);\r\n  const [unapprovedAdmins, setUnapprovedAdmins] = useState([] as string[]);\r\n  const [loggedIn, setLoggedIn] = useState(false);\r\n\r\n  const connectionRef = useRef<signalR.HubConnection>();\r\n\r\n  const methodRef = useRef({\r\n    modified: (state: PlaceDataModifiedState, data: ServerPlace) => {},\r\n    approval: (email: string, approval: boolean) => {},\r\n    logout: () => {}\r\n  });\r\n\r\n  const placesRef = useRef([] as ServerPlace[]);\r\n        \r\n  useEffect(() => {\r\n    methodRef.current.modified = (\r\n      state: PlaceDataModifiedState,\r\n      data: ServerPlace\r\n    ) => {\r\n      switch (state) {\r\n        case PlaceDataModifiedState.Created:\r\n          setPlaces([data, ...places]);\r\n          break;\r\n        case PlaceDataModifiedState.Destroyed:\r\n          setPlaces(places.filter((place) => place.id !== data.id));\r\n          break;\r\n        case PlaceDataModifiedState.Modified:\r\n          {\r\n            const idx = places.findIndex((place) => place.id === data.id);\r\n            console.log(idx, places);\r\n            if (idx >= 0) {\r\n              places[idx] = data;\r\n              setPlaces([...places]);\r\n            }\r\n          }\r\n          break;\r\n      }\r\n    };\r\n\r\n    methodRef.current.approval = (email: string, approved: boolean) => {\r\n      if (approved)\r\n        setUnapprovedAdmins(unapprovedAdmins.filter((admin) => admin !== email));\r\n      else\r\n        setUnapprovedAdmins([...unapprovedAdmins, email]);\r\n    };\r\n    methodRef.current.logout = () => {\r\n      setLoggedIn(false);\r\n    };\r\n  });\r\n\r\n  useEffect(() => {\r\n    connectionRef.current = new signalR.HubConnectionBuilder()\r\n      .withUrl(\"/adminhub\")\r\n      .withAutomaticReconnect()\r\n      .build();\r\n\r\n    connectionRef.current.on(\r\n      \"PlaceModified\",\r\n      (state: PlaceDataModifiedState, data: ServerPlace) =>\r\n        methodRef.current.modified(state, data)\r\n    );\r\n    connectionRef.current.on(\r\n      \"AdminApprovalUpdate\",\r\n      (email: string, approval: boolean) =>\r\n        methodRef.current.approval(email, approval)\r\n    );\r\n    connectionRef.current.onclose((e) => methodRef.current.logout());\r\n    connectionRef.current.onreconnected((e) => methodRef.current.logout());\r\n    connectionRef.current.start().catch((err) => console.log(err));\r\n  }, []);\r\n\r\n  const data: ServerDataType = {\r\n    places,\r\n    unapprovedAdmins,\r\n    loggedIn,\r\n    addPlace: (p) => {\r\n      connectionRef.current\r\n        ?.invoke(\"ModifyPlace\", PlaceDataModifiedState.Created, p)\r\n        .then(setLoggedIn);\r\n    },\r\n    deletePlace: (id) => {\r\n      connectionRef.current\r\n        ?.invoke(\"ModifyPlace\", PlaceDataModifiedState.Destroyed, {\r\n          id: id,\r\n          imageUrl: \"\",\r\n          name: \"\",\r\n          description: \"\",\r\n          points: 0,\r\n          lat: 0,\r\n          long: 0,\r\n          radius: 0,\r\n          citationUrl: \"\",\r\n          linkUrl: \"\",\r\n          longDescription: \"\",\r\n        } as ServerPlace)\r\n        .then(setLoggedIn);\r\n    },\r\n    modifyPlace: (id, p) => {\r\n      connectionRef.current\r\n        ?.invoke(\"ModifyPlace\", PlaceDataModifiedState.Modified, {\r\n          ...p,\r\n          id: id,\r\n        } as ServerPlace)\r\n        .then(setLoggedIn);\r\n    },\r\n    updateAdmin: (name, approve) => {\r\n      connectionRef.current\r\n        ?.invoke(\"UpdateAdminStatus\", name, approve)\r\n        .then(setLoggedIn);\r\n    },\r\n    login: async (name, password) => {\r\n      const result = await connectionRef.current?.invoke(\r\n        \"Login\",\r\n        name,\r\n        password\r\n      );\r\n      if (result === ServerLoginResult.Success) {\r\n        placesRef.current = [];\r\n        connectionRef.current?.stream(\"GetPlaces\").subscribe({\r\n          next: (place) => {\r\n            console.log(place);\r\n            placesRef.current.push(place);\r\n            },\r\n          complete: () => setPlaces(placesRef.current.reverse()),\r\n          error: (err) => {},\r\n        });\r\n\r\n        connectionRef.current\r\n          ?.invoke(\"GetUnapprovedAdmins\")\r\n          .then((admins: string[]) =>\r\n            setUnapprovedAdmins([...admins, ...unapprovedAdmins])\r\n          );\r\n        setLoggedIn(true);\r\n      }\r\n      return result;\r\n    },\r\n    requestAdmin: async (name, password) => {\r\n      return (await connectionRef.current?.invoke(\r\n        \"RequestAdmin\",\r\n        name,\r\n        password\r\n      )) as boolean;\r\n    },\r\n  };\r\n  return (\r\n    <ServerDataContext.Provider value={data}>\r\n      {props.children}\r\n    </ServerDataContext.Provider>\r\n  );\r\n}\r\n","import {\r\n  Container,\r\n  Paper,\r\n  Grid,\r\n  TextField,\r\n  Button,\r\n  Box,\r\n  Divider,\r\n  CardHeader,\r\n  CardMedia,\r\n  CardContent,\r\n  CardActions,\r\n  InputAdornment,\r\n  Typography,\r\n  IconButton,\r\n  Card,\r\n  makeStyles,\r\n  Dialog,\r\n  DialogContentText,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogActions,\r\n} from \"@material-ui/core\";\r\n\r\nimport { Delete, Edit, Search } from \"@material-ui/icons\";\r\n\r\nimport { useState, useContext, useEffect, useRef } from \"react\";\r\nimport * as StringSimilarity from \"string-similarity\";\r\n\r\nimport { ServerPlace, ServerDataContext } from \"./ServerData\";\r\n\r\ntype PlaceCardProps = {\r\n  id: string;\r\n  name: string;\r\n  imageUrl: string;\r\n  description: string;\r\n  points: number;\r\n  remove: (id: string) => void;\r\n  edit: (id: string) => void;\r\n};\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  media: {\r\n    paddingTop: \"40%\",\r\n  },\r\n}));\r\n\r\nfunction PlaceCard({\r\n  id,\r\n  name,\r\n  imageUrl,\r\n  description,\r\n  points,\r\n  remove,\r\n  edit,\r\n}: PlaceCardProps) {\r\n  const classes = useStyles();\r\n  return (\r\n    <Card>\r\n      <CardHeader\r\n        action={\r\n          <IconButton onClick={() => edit(id)}>\r\n            <Edit />\r\n          </IconButton>\r\n        }\r\n        title={name}\r\n        subheader={points + (points === 1 ? \" point\" : \" points\")}\r\n      />\r\n      <CardMedia image={imageUrl} className={classes.media} />\r\n      <CardContent>\r\n        <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n          {description}\r\n        </Typography>\r\n      </CardContent>\r\n      <CardActions disableSpacing>\r\n        <IconButton onClick={() => remove(id)}>\r\n          <Delete />\r\n        </IconButton>\r\n      </CardActions>\r\n    </Card>\r\n  );\r\n}\r\n\r\ntype PlaceDialogProps = {\r\n  id: string;\r\n  close: () => void;\r\n  isOpen: boolean;\r\n};\r\n\r\nfunction DeleteDialog({ id, close, isOpen }: PlaceDialogProps) {\r\n  const dataContext = useContext(ServerDataContext);\r\n\r\n  const del = () => {\r\n    dataContext.deletePlace(id);\r\n    close();\r\n  };\r\n\r\n  return (\r\n    <Dialog open={isOpen} onClose={close}>\r\n      <DialogTitle>Delete this place?</DialogTitle>\r\n      <DialogContent>\r\n        <DialogContentText id=\"alert-dialog-description\">\r\n          Are you sure you want to delete \"\r\n          {dataContext.places.find((place) => place.id === id)?.name}\r\n          \"?\r\n        </DialogContentText>\r\n      </DialogContent>\r\n      <DialogActions>\r\n        <Button onClick={close} color=\"primary\">\r\n          Cancel\r\n        </Button>\r\n        <Button onClick={del} color=\"secondary\" autoFocus>\r\n          Delete\r\n        </Button>\r\n      </DialogActions>\r\n    </Dialog>\r\n  );\r\n}\r\n\r\nfunction EditorDialog({ id, close, isOpen }: PlaceDialogProps) {\r\n  const emptyPlace: ServerPlace = {\r\n    name: \"\",\r\n    id: \"\",\r\n    imageUrl: \"\",\r\n    description: \"\",\r\n    lat: 0,\r\n    long: 0,\r\n    points: 0,\r\n    radius: 0,\r\n    citationUrl: \"\",\r\n    linkUrl: \"\",\r\n    longDescription: \"\",\r\n  };\r\n\r\n  const [data, setData] = useState(emptyPlace);\r\n  const dataContext = useContext(ServerDataContext);\r\n\r\n  useEffect(() => {\r\n    if (isOpen) {\r\n      if (id === \"_new\") setData(emptyPlace);\r\n      else {\r\n        const place = dataContext.places.find((place) => place.id === id);\r\n        if (place) setData(place);\r\n      }\r\n    }\r\n  }, [isOpen, id, dataContext]);\r\n\r\n  const finish = () => {\r\n    if (id === \"_new\") dataContext.addPlace(data);\r\n    else dataContext.modifyPlace(id, data);\r\n    close();\r\n  };\r\n\r\n  return (\r\n    <Dialog open={isOpen} onClose={close} scroll=\"body\" fullWidth maxWidth=\"sm\">\r\n      <DialogTitle>{id === \"_new\" ? \"New Place\" : \"Edit Place\"}</DialogTitle>\r\n      <DialogContent>\r\n        <Grid container>\r\n          <Grid container>\r\n            <TextField\r\n              label=\"Name\"\r\n              value={data.name}\r\n              onChange={(e) => setData({ ...data, name: e.target.value })}\r\n              style={{ marginBottom: 4 }}\r\n              fullWidth\r\n            />\r\n          </Grid>\r\n          <Grid container>\r\n            <TextField\r\n              label=\"Points\"\r\n              value={data.points}\r\n              onChange={(e) =>\r\n                setData({ ...data, points: parseInt(e.target.value) })\r\n              }\r\n              type=\"number\"\r\n              style={{ marginBottom: 8 }}\r\n              fullWidth\r\n            />\r\n          </Grid>\r\n          <Grid container>\r\n            <TextField\r\n              label=\"Latitude\"\r\n              type=\"number\"\r\n              value={data.lat}\r\n              onChange={(e) =>\r\n                setData({ ...data, lat: parseFloat(e.target.value) })\r\n              }\r\n              style={{ marginBottom: 8 }}\r\n              fullWidth\r\n            />\r\n          </Grid>\r\n          <Grid container>\r\n            <TextField\r\n              label=\"Longitude\"\r\n              type=\"number\"\r\n              value={data.long}\r\n              onChange={(e) =>\r\n                setData({ ...data, long: parseFloat(e.target.value) })\r\n              }\r\n              style={{ marginBottom: 8 }}\r\n              fullWidth\r\n            />\r\n          </Grid>\r\n          <Grid container>\r\n            <TextField\r\n              label=\"Distance considered far\"\r\n              type=\"number\"\r\n              value={data.radius}\r\n              onChange={(e) =>\r\n                setData({ ...data, radius: parseFloat(e.target.value) })\r\n              }\r\n              style={{ marginBottom: 8 }}\r\n              fullWidth\r\n            />\r\n          </Grid>\r\n          <Grid container>\r\n            <TextField\r\n              label=\"Image URL\"\r\n              value={data.imageUrl}\r\n              onChange={(e) => setData({ ...data, imageUrl: e.target.value })}\r\n              style={{ marginBottom: 8 }}\r\n              fullWidth\r\n            />\r\n          </Grid>\r\n          <Grid container>\r\n            <TextField\r\n              label=\"Guiding Description\"\r\n              value={data.description}\r\n              onChange={(e) =>\r\n                setData({ ...data, description: e.target.value })\r\n              }\r\n              inputProps={{\r\n                maxLength: 100,\r\n              }}\r\n              style={{ marginBottom: 8 }}\r\n              fullWidth\r\n              multiline\r\n            />\r\n          </Grid>\r\n          <Grid container>\r\n            <TextField\r\n              label=\"Learn More Description\"\r\n              value={data.longDescription}\r\n              onChange={(e) =>\r\n                setData({ ...data, longDescription: e.target.value })\r\n              }\r\n              style={{ marginBottom: 8 }}\r\n              fullWidth\r\n              multiline\r\n            />\r\n          </Grid>\r\n          <Grid container>\r\n            <TextField\r\n              label=\"Learn More Citation URL\"\r\n              value={data.citationUrl}\r\n              onChange={(e) =>\r\n                setData({ ...data, citationUrl: e.target.value })\r\n              }\r\n              style={{ marginBottom: 8 }}\r\n              fullWidth\r\n              multiline\r\n            />\r\n          </Grid>\r\n          <Grid container>\r\n            <TextField\r\n              label=\"Learn More URL\"\r\n              value={data.linkUrl}\r\n              onChange={(e) => setData({ ...data, linkUrl: e.target.value })}\r\n              style={{ marginBottom: 8 }}\r\n              fullWidth\r\n              multiline\r\n            />\r\n          </Grid>\r\n        </Grid>\r\n      </DialogContent>\r\n      <DialogActions>\r\n        <Button onClick={close} color=\"primary\">\r\n          Cancel\r\n        </Button>\r\n        <Button onClick={finish} color=\"primary\">\r\n          Save\r\n        </Button>\r\n      </DialogActions>\r\n    </Dialog>\r\n  );\r\n}\r\n\r\ntype PlaceCardEntry = {\r\n  id: string;\r\n  name: string;\r\n  points: number;\r\n  url: string;\r\n  description: string;\r\n};\r\n\r\nexport default function Places({}) {\r\n  const [editorOpen, setEditorOpen] = useState(false);\r\n  const [dialogId, setDialogId] = useState(\"_new\");\r\n  const [deleteOpen, setDeleteOpen] = useState(false);\r\n\r\n  const [searchQuery, setSearchQuery] = useState(\"\");\r\n  const searchRef = useRef(0);\r\n\r\n  const dataContext = useContext(ServerDataContext);\r\n\r\n  const newPlaceClicked = () => {\r\n    setDialogId(\"_new\");\r\n    setEditorOpen(true);\r\n  };\r\n\r\n  const editClicked = (id: string) => {\r\n    setDialogId(id);\r\n    setEditorOpen(true);\r\n  };\r\n\r\n  const deleteClicked = (id: string) => {\r\n    setDialogId(id);\r\n    setDeleteOpen(true);\r\n  };\r\n\r\n  let [items, setItems] = useState([] as PlaceCardEntry[]);\r\n\r\n  useEffect(() => {\r\n    const mapper = (p: ServerPlace) =>\r\n      ({\r\n        id: p.id,\r\n        name: p.name,\r\n        points: p.points,\r\n        url: p.imageUrl,\r\n        description: p.description,\r\n      } as PlaceCardEntry);\r\n\r\n    const sorter = (a: PlaceCardEntry, b: PlaceCardEntry) =>\r\n      StringSimilarity.compareTwoStrings(b.name, searchQuery) -\r\n      StringSimilarity.compareTwoStrings(a.name, searchQuery);\r\n\r\n    clearTimeout(searchRef.current);\r\n    if (searchQuery === \"\") {\r\n      setItems(dataContext.places.map(mapper));\r\n    } else {\r\n      searchRef.current = window.setTimeout(() => {\r\n        setItems(dataContext.places.map(mapper).sort(sorter));\r\n      }, 300);\r\n    }\r\n  }, [dataContext, searchQuery]);\r\n\r\n  return (\r\n    <>\r\n      <DeleteDialog\r\n        id={dialogId}\r\n        isOpen={deleteOpen}\r\n        close={() => setDeleteOpen(false)}\r\n      />\r\n      <EditorDialog\r\n        id={dialogId}\r\n        isOpen={editorOpen}\r\n        close={() => setEditorOpen(false)}\r\n      />\r\n      <Grid container justify=\"center\" alignContent=\"center\">\r\n        <Grid\r\n          container\r\n          style={{ position: \"sticky\", top: 90, opacity: 0.95, zIndex: 100 }}\r\n        >\r\n          <Grid item xs={1} />\r\n          <Grid item xs={10}>\r\n            <Paper elevation={1}>\r\n              <Grid container spacing={2} alignItems=\"center\">\r\n                <Grid item xs={6}>\r\n                  <Box ml={1}>\r\n                    <Button onClick={newPlaceClicked}>New Place</Button>\r\n                  </Box>\r\n                </Grid>\r\n                <Grid item xs>\r\n                  <Box mr={1}>\r\n                    <TextField\r\n                      id=\"input-with-icon-grid\"\r\n                      variant=\"outlined\"\r\n                      size=\"small\"\r\n                      type=\"search\"\r\n                      onChange={(e) => setSearchQuery(e.target.value)}\r\n                      fullWidth\r\n                      InputProps={{\r\n                        startAdornment: (\r\n                          <InputAdornment position=\"start\">\r\n                            <Search />\r\n                          </InputAdornment>\r\n                        ),\r\n                      }}\r\n                    />\r\n                  </Box>\r\n                </Grid>\r\n              </Grid>\r\n            </Paper>\r\n          </Grid>\r\n        </Grid>\r\n        <Grid container style={{ marginTop: 32 }}>\r\n          {items.map((item) => (\r\n            <Grid container style={{ marginBottom: 16 }} key={item.id}>\r\n              <Grid xs={3} item />\r\n              <Grid xs={6} item>\r\n                <PlaceCard\r\n                  id={item.id}\r\n                  name={item.name}\r\n                  imageUrl={item.url}\r\n                  description={item.description}\r\n                  points={item.points}\r\n                  edit={editClicked}\r\n                  remove={deleteClicked}\r\n                />\r\n              </Grid>\r\n            </Grid>\r\n          ))}\r\n        </Grid>\r\n      </Grid>\r\n    </>\r\n  );\r\n}\r\n","import {\r\n  Card,\r\n  CardHeader,\r\n  CardContent,\r\n  Typography,\r\n  CardActions,\r\n  Button,\r\n  Grid,\r\n} from \"@material-ui/core\";\r\nimport { useContext } from \"react\";\r\n\r\nimport { ServerDataContext } from \"./ServerData\";\r\n\r\ntype AdminCardProps = {\r\n  name: string;\r\n};\r\n\r\nfunction AdminCard({ name }: AdminCardProps) {\r\n  const dataContext = useContext(ServerDataContext);\r\n\r\n  return (\r\n    <Card>\r\n      <CardHeader title=\"Request for Admin Access\" />\r\n      <CardContent>\r\n        <Typography variant=\"body1\" component=\"span\">\r\n          Email Address:\r\n        </Typography>\r\n        <Typography variant=\"body2\" component=\"span\">\r\n          {\" \" + name}\r\n        </Typography>\r\n      </CardContent>\r\n      <CardActions>\r\n        <Button\r\n          size=\"small\"\r\n          onClick={() => dataContext.updateAdmin(name, true)}\r\n        >\r\n          Approve\r\n        </Button>\r\n        <Button\r\n          size=\"small\"\r\n          onClick={() => dataContext.updateAdmin(name, false)}\r\n          color=\"secondary\"\r\n        >\r\n          Deny\r\n        </Button>\r\n      </CardActions>\r\n    </Card>\r\n  );\r\n}\r\n\r\nexport default function AdminApproval() {\r\n  const dataContext = useContext(ServerDataContext);\r\n\r\n  return (\r\n    <Grid container justify=\"center\">\r\n      {dataContext.unapprovedAdmins.length === 0 ? (\r\n        <Typography>No admins need approval</Typography>\r\n      ) : null}\r\n      {dataContext.unapprovedAdmins.map((name) => (\r\n        <Grid container style={{ marginBottom: 16 }} key={name}>\r\n          <Grid xs={3} item />\r\n          <Grid xs={6} item>\r\n            <AdminCard name={name} />\r\n          </Grid>\r\n        </Grid>\r\n      ))}\r\n    </Grid>\r\n  );\r\n}\r\n","import {\r\n  AppBar,\r\n  Toolbar,\r\n  Typography,\r\n  CssBaseline,\r\n  TextField,\r\n  Grid,\r\n  Drawer,\r\n  makeStyles,\r\n  List,\r\n  ListItem,\r\n  ListItemText,\r\n  ListItemIcon,\r\n  Paper,\r\n  Container,\r\n  Button,\r\n} from \"@material-ui/core\";\r\n\r\nimport {\r\n  Group,\r\n  Home,\r\n  LocationOn,\r\n  PeopleRounded,\r\n  Person,\r\n  Search,\r\n  VerifiedUser,\r\n} from \"@material-ui/icons\";\r\n\r\nimport Places from \"./components/Places\";\r\nimport { MemoryRouter, Switch, Route, useHistory } from \"react-router-dom\";\r\nimport AdminApproval from \"./components/AdminApproval\";\r\n\r\nconst drawerWidth = 240;\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: \"flex\",\r\n  },\r\n  appBar: {\r\n    zIndex: theme.zIndex.drawer + 1,\r\n  },\r\n  drawer: {\r\n    width: drawerWidth,\r\n    flexShrink: 0,\r\n  },\r\n  drawerPaper: {\r\n    width: drawerWidth,\r\n  },\r\n  drawerContainer: {\r\n    overflow: \"auto\",\r\n  },\r\n  content: {\r\n    flexGrow: 1,\r\n    padding: theme.spacing(3),\r\n  },\r\n}));\r\n\r\ntype NavigationDrawerProps = {\r\n  drawerClass: string;\r\n  drawerPaper: string;\r\n};\r\n\r\nfunction NavigationDrawer({ drawerClass, drawerPaper }: NavigationDrawerProps) {\r\n  const history = useHistory();\r\n  return (\r\n    <Drawer\r\n      variant=\"permanent\"\r\n      className={drawerClass}\r\n      classes={{ paper: drawerPaper }}\r\n    >\r\n      <Toolbar />\r\n      <List>\r\n        <ListItem button onClick={() => history.push(\"/\")}>\r\n          <ListItemIcon>\r\n            <Home />\r\n          </ListItemIcon>\r\n          <ListItemText primary=\"Home\" />\r\n        </ListItem>\r\n        <ListItem button onClick={() => history.push(\"/places\")}>\r\n          <ListItemIcon>\r\n            <LocationOn />\r\n          </ListItemIcon>\r\n          <ListItemText primary=\"Places\" />\r\n        </ListItem>\r\n        <ListItem button onClick={() => history.push(\"/admins\")}>\r\n          <ListItemIcon>\r\n            <VerifiedUser />\r\n          </ListItemIcon>\r\n          <ListItemText primary=\"Admin Approval\" />\r\n        </ListItem>\r\n        <ListItem button onClick={() => history.push(\"/users\")}>\r\n          <ListItemIcon>\r\n            <PeopleRounded />\r\n          </ListItemIcon>\r\n          <ListItemText primary=\"Users\" />\r\n        </ListItem>\r\n      </List>\r\n    </Drawer>\r\n  );\r\n}\r\n\r\nexport default function App() {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <MemoryRouter>\r\n      <AppBar position=\"fixed\" className={classes.appBar}>\r\n        <CssBaseline />\r\n        <Toolbar>\r\n          <Typography variant=\"subtitle1\" color=\"inherit\">\r\n            CornellGO! Manager\r\n          </Typography>\r\n        </Toolbar>\r\n      </AppBar>\r\n\r\n      <NavigationDrawer\r\n        drawerClass={classes.drawer}\r\n        drawerPaper={classes.drawerPaper}\r\n      />\r\n\r\n      <div style={{ marginLeft: 240, marginTop: 84 }}>\r\n        <Switch>\r\n          <Route path=\"/\" exact>\r\n            <div>Home</div>\r\n          </Route>\r\n          <Route path=\"/places\">\r\n            <Places />\r\n          </Route>\r\n          <Route path=\"/admins\">\r\n            <AdminApproval />\r\n          </Route>\r\n          <Route path=\"/users\">\r\n            <div>Users</div>\r\n          </Route>\r\n        </Switch>\r\n      </div>\r\n    </MemoryRouter>\r\n  );\r\n}\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import {\r\n  DialogTitle,\r\n  Dialog,\r\n  DialogContent,\r\n  Grid,\r\n  DialogActions,\r\n  TextField,\r\n  Button,\r\n  Snackbar,\r\n} from \"@material-ui/core\";\r\n\r\nimport { ReactNode, useContext, useState } from \"react\";\r\n\r\nimport { ServerDataContext, ServerLoginResult } from \"./ServerData\";\r\n\r\nimport * as EmailValidator from \"email-validator\";\r\n\r\nexport default function Login(props: { children: ReactNode }) {\r\n  const dataContext = useContext(ServerDataContext);\r\n\r\n  const [email, setEmail] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const [badText, setBadText] = useState(\"\");\r\n  const [passBadText, setPassBadText] = useState(\"\");\r\n  const [requested, setRequested] = useState(false);\r\n\r\n  const login = async () => {\r\n    const result = await dataContext.login(email, password);\r\n    setBadText(\r\n      result === ServerLoginResult.NoAdminApproval\r\n        ? \"Email is awaiting response\"\r\n        : result === ServerLoginResult.AdminRejected\r\n        ? \"Email has been rejected\"\r\n        : result === ServerLoginResult.NoAccount\r\n        ? \"Email has not been registered\"\r\n        : \"\"\r\n    );\r\n    if (result === ServerLoginResult.WrongPassword)\r\n      setPassBadText(\"Incorrect password\");\r\n  };\r\n\r\n  const requestAccess = async () => {\r\n    if (!EmailValidator.validate(email)) {\r\n      setBadText(\"Invaild email format!\");\r\n      return;\r\n    }\r\n    const result = await dataContext.requestAdmin(email, password);\r\n\r\n    if (result) {\r\n      setBadText(\"\");\r\n      setRequested(true);\r\n    } else {\r\n      setBadText(\"Email is awaiting response or rejected\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Dialog\r\n        open={!dataContext.loggedIn}\r\n        scroll=\"body\"\r\n        fullWidth\r\n        maxWidth=\"sm\"\r\n      >\r\n        <DialogTitle>CornellGO! Manager</DialogTitle>\r\n        <DialogContent>\r\n          <Grid container>\r\n            <Grid container>\r\n              <TextField\r\n                label=\"Email\"\r\n                value={email}\r\n                onChange={(e) => setEmail(e.target.value)}\r\n                style={{ marginBottom: 4 }}\r\n                error={badText.length > 0}\r\n                helperText={badText}\r\n                fullWidth\r\n              />\r\n              <TextField\r\n                label=\"Password\"\r\n                value={password}\r\n                type=\"password\"\r\n                onChange={(e) => setPassword(e.target.value)}\r\n                style={{ marginBottom: 4 }}\r\n                error={passBadText.length > 0}\r\n                helperText={passBadText}\r\n                fullWidth\r\n              />\r\n            </Grid>\r\n          </Grid>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={login} color=\"primary\">\r\n            Login\r\n          </Button>\r\n          <Button onClick={requestAccess} color=\"primary\">\r\n            Request Access\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n      <Snackbar\r\n        anchorOrigin={{ vertical: \"bottom\", horizontal: \"center\" }}\r\n        open={requested}\r\n        autoHideDuration={6000}\r\n        onClose={() => setRequested(false)}\r\n        message=\"Requested admin access\"\r\n      />\r\n      {dataContext.loggedIn && props.children}\r\n    </>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\nimport { ServerData } from \"./components/ServerData\";\r\nimport Login from \"./components/Login\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <ServerData>\r\n      <Login>\r\n        <App />\r\n      </Login>\r\n    </ServerData>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}